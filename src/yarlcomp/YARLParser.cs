//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g 2012-09-12 11:28:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace DSparx.YARL.Compiler
{
/**
* 
*	YARL GRAMMAR
*	Dimitrios Traskas
*	
*	
**/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
internal partial class YARLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANTECEDENTDEF", "ANTECEDENTSDEF", "CERTAINTYDEF", "CHAR_LITERAL", "COMMENT", "CONSEQUENTDEF", "CONTAINSALL", "DESCDEF", "EXECUTEDEF", "EXPONENT", "FLOAT", "FUZZYRANGEDEF", "FUZZYSETDEF", "FUZZYSETSHAPEDEF", "FUZZYVAR", "ID", "INTEGER", "MINUS", "OPERATORDEF", "PRIORITYDEF", "PROGRAM", "RULECOLLECTIONALLDEFCHOICE", "RULECOLLECTIONDEF", "RULECOLLECTIONDEFCHOICE", "RULEDEF", "RULESETCHOICEDEF", "RULESETDEF", "SHAPEP", "SHAPES", "SHAPEZ", "STRING_LITERAL", "VARIABLEDEF", "WEIGHTDEF", "WHENDEF", "WS", "'$'", "'('", "')'", "','", "'all'", "'and'", "'begin'", "'certainty'", "'contains'", "'desc'", "'end'", "'execute'", "'fuzzyvar'", "'is'", "'or'", "'priority'", "'range'", "'rule'", "'ruleset'", "'set_/'", "'set_/\\\\'", "'set_\\\\'", "'then'", "'weight'", "'when'"
	};
	public const int EOF=-1;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int ANTECEDENTDEF=4;
	public const int ANTECEDENTSDEF=5;
	public const int CERTAINTYDEF=6;
	public const int CHAR_LITERAL=7;
	public const int COMMENT=8;
	public const int CONSEQUENTDEF=9;
	public const int CONTAINSALL=10;
	public const int DESCDEF=11;
	public const int EXECUTEDEF=12;
	public const int EXPONENT=13;
	public const int FLOAT=14;
	public const int FUZZYRANGEDEF=15;
	public const int FUZZYSETDEF=16;
	public const int FUZZYSETSHAPEDEF=17;
	public const int FUZZYVAR=18;
	public const int ID=19;
	public const int INTEGER=20;
	public const int MINUS=21;
	public const int OPERATORDEF=22;
	public const int PRIORITYDEF=23;
	public const int PROGRAM=24;
	public const int RULECOLLECTIONALLDEFCHOICE=25;
	public const int RULECOLLECTIONDEF=26;
	public const int RULECOLLECTIONDEFCHOICE=27;
	public const int RULEDEF=28;
	public const int RULESETCHOICEDEF=29;
	public const int RULESETDEF=30;
	public const int SHAPEP=31;
	public const int SHAPES=32;
	public const int SHAPEZ=33;
	public const int STRING_LITERAL=34;
	public const int VARIABLEDEF=35;
	public const int WEIGHTDEF=36;
	public const int WHENDEF=37;
	public const int WS=38;

	public YARLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public YARLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return YARLParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g"; } }


	  public override void ReportError(RecognitionException e) {
	    throw e;
	  }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:67:8: public program : ( fuzzyvarDef | ruleDef | rulesetDef | executeDef )+ -> ^( PROGRAM ( fuzzyvarDef )+ ( ruleDef )+ ( rulesetDef )+ ( executeDef )+ ) ;
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> fuzzyvarDef1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ruleDef2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> rulesetDef3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> executeDef4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_executeDef=new RewriteRuleSubtreeStream(adaptor,"rule executeDef");
		RewriteRuleSubtreeStream stream_fuzzyvarDef=new RewriteRuleSubtreeStream(adaptor,"rule fuzzyvarDef");
		RewriteRuleSubtreeStream stream_ruleDef=new RewriteRuleSubtreeStream(adaptor,"rule ruleDef");
		RewriteRuleSubtreeStream stream_rulesetDef=new RewriteRuleSubtreeStream(adaptor,"rule rulesetDef");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(67, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:2: ( ( fuzzyvarDef | ruleDef | rulesetDef | executeDef )+ -> ^( PROGRAM ( fuzzyvarDef )+ ( ruleDef )+ ( rulesetDef )+ ( executeDef )+ ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:4: ( fuzzyvarDef | ruleDef | rulesetDef | executeDef )+
			{
			DebugLocation(68, 4);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:4: ( fuzzyvarDef | ruleDef | rulesetDef | executeDef )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=5;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case 51:
					{
					alt1 = 1;
					}
					break;
				case 56:
					{
					alt1 = 2;
					}
					break;
				case 57:
					{
					alt1 = 3;
					}
					break;
				case 50:
					{
					alt1 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:5: fuzzyvarDef
					{
					DebugLocation(68, 5);
					PushFollow(Follow._fuzzyvarDef_in_program188);
					fuzzyvarDef1=fuzzyvarDef();
					PopFollow();

					stream_fuzzyvarDef.Add(fuzzyvarDef1.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:19: ruleDef
					{
					DebugLocation(68, 19);
					PushFollow(Follow._ruleDef_in_program192);
					ruleDef2=ruleDef();
					PopFollow();

					stream_ruleDef.Add(ruleDef2.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:29: rulesetDef
					{
					DebugLocation(68, 29);
					PushFollow(Follow._rulesetDef_in_program196);
					rulesetDef3=rulesetDef();
					PopFollow();

					stream_rulesetDef.Add(rulesetDef3.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:68:42: executeDef
					{
					DebugLocation(68, 42);
					PushFollow(Follow._executeDef_in_program200);
					executeDef4=executeDef();
					PopFollow();

					stream_executeDef.Add(executeDef4.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: executeDef, ruleDef, fuzzyvarDef, rulesetDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 69:4: -> ^( PROGRAM ( fuzzyvarDef )+ ( ruleDef )+ ( rulesetDef )+ ( executeDef )+ )
			{
				DebugLocation(69, 7);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:69:7: ^( PROGRAM ( fuzzyvarDef )+ ( ruleDef )+ ( rulesetDef )+ ( executeDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(69, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

				DebugLocation(69, 17);
				if (!(stream_fuzzyvarDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_fuzzyvarDef.HasNext )
				{
					DebugLocation(69, 17);
					adaptor.AddChild(root_1, stream_fuzzyvarDef.NextTree());

				}
				stream_fuzzyvarDef.Reset();
				DebugLocation(69, 30);
				if (!(stream_ruleDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ruleDef.HasNext )
				{
					DebugLocation(69, 30);
					adaptor.AddChild(root_1, stream_ruleDef.NextTree());

				}
				stream_ruleDef.Reset();
				DebugLocation(69, 39);
				if (!(stream_rulesetDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_rulesetDef.HasNext )
				{
					DebugLocation(69, 39);
					adaptor.AddChild(root_1, stream_rulesetDef.NextTree());

				}
				stream_rulesetDef.Reset();
				DebugLocation(69, 51);
				if (!(stream_executeDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_executeDef.HasNext )
				{
					DebugLocation(69, 51);
					adaptor.AddChild(root_1, stream_executeDef.NextTree());

				}
				stream_executeDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_fuzzyvarDef();
	partial void LeaveRule_fuzzyvarDef();

	// $ANTLR start "fuzzyvarDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:75:1: fuzzyvarDef : 'fuzzyvar' ID ( fuzzyrangeDef | descDef )* 'begin' ( fuzzysetDef )* 'end' -> ^( FUZZYVAR ID ( fuzzyrangeDef )* ( descDef )* ( fuzzysetDef )* ) ;
	[GrammarRule("fuzzyvarDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fuzzyvarDef()
	{
		EnterRule_fuzzyvarDef();
		EnterRule("fuzzyvarDef", 2);
		TraceIn("fuzzyvarDef", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal5 = default(CommonToken);
		CommonToken ID6 = default(CommonToken);
		CommonToken string_literal9 = default(CommonToken);
		CommonToken string_literal11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fuzzyrangeDef7 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> descDef8 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fuzzysetDef10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree ID6_tree = default(CommonTree);
		CommonTree string_literal9_tree = default(CommonTree);
		CommonTree string_literal11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fuzzysetDef=new RewriteRuleSubtreeStream(adaptor,"rule fuzzysetDef");
		RewriteRuleSubtreeStream stream_fuzzyrangeDef=new RewriteRuleSubtreeStream(adaptor,"rule fuzzyrangeDef");
		RewriteRuleSubtreeStream stream_descDef=new RewriteRuleSubtreeStream(adaptor,"rule descDef");
		try { DebugEnterRule(GrammarFileName, "fuzzyvarDef");
		DebugLocation(75, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:76:2: ( 'fuzzyvar' ID ( fuzzyrangeDef | descDef )* 'begin' ( fuzzysetDef )* 'end' -> ^( FUZZYVAR ID ( fuzzyrangeDef )* ( descDef )* ( fuzzysetDef )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:76:4: 'fuzzyvar' ID ( fuzzyrangeDef | descDef )* 'begin' ( fuzzysetDef )* 'end'
			{
			DebugLocation(76, 4);
			string_literal5=(CommonToken)Match(input,51,Follow._51_in_fuzzyvarDef240);  
			stream_51.Add(string_literal5);

			DebugLocation(76, 15);
			ID6=(CommonToken)Match(input,ID,Follow._ID_in_fuzzyvarDef242);  
			stream_ID.Add(ID6);

			DebugLocation(76, 18);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:76:18: ( fuzzyrangeDef | descDef )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==55))
				{
					alt2 = 1;
				}
				else if ((LA2_0==48))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:76:19: fuzzyrangeDef
					{
					DebugLocation(76, 19);
					PushFollow(Follow._fuzzyrangeDef_in_fuzzyvarDef245);
					fuzzyrangeDef7=fuzzyrangeDef();
					PopFollow();

					stream_fuzzyrangeDef.Add(fuzzyrangeDef7.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:76:35: descDef
					{
					DebugLocation(76, 35);
					PushFollow(Follow._descDef_in_fuzzyvarDef249);
					descDef8=descDef();
					PopFollow();

					stream_descDef.Add(descDef8.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(77, 3);
			string_literal9=(CommonToken)Match(input,45,Follow._45_in_fuzzyvarDef255);  
			stream_45.Add(string_literal9);

			DebugLocation(78, 3);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:78:3: ( fuzzysetDef )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>=58 && LA3_0<=60)))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:78:3: fuzzysetDef
					{
					DebugLocation(78, 3);
					PushFollow(Follow._fuzzysetDef_in_fuzzyvarDef260);
					fuzzysetDef10=fuzzysetDef();
					PopFollow();

					stream_fuzzysetDef.Add(fuzzysetDef10.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(79, 3);
			string_literal11=(CommonToken)Match(input,49,Follow._49_in_fuzzyvarDef265);  
			stream_49.Add(string_literal11);



			{
			// AST REWRITE
			// elements: fuzzysetDef, descDef, fuzzyrangeDef, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 80:3: -> ^( FUZZYVAR ID ( fuzzyrangeDef )* ( descDef )* ( fuzzysetDef )* )
			{
				DebugLocation(80, 6);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:80:6: ^( FUZZYVAR ID ( fuzzyrangeDef )* ( descDef )* ( fuzzysetDef )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(80, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUZZYVAR, "FUZZYVAR"), root_1);

				DebugLocation(80, 17);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(80, 20);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:80:20: ( fuzzyrangeDef )*
				while ( stream_fuzzyrangeDef.HasNext )
				{
					DebugLocation(80, 20);
					adaptor.AddChild(root_1, stream_fuzzyrangeDef.NextTree());

				}
				stream_fuzzyrangeDef.Reset();
				DebugLocation(80, 35);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:80:35: ( descDef )*
				while ( stream_descDef.HasNext )
				{
					DebugLocation(80, 35);
					adaptor.AddChild(root_1, stream_descDef.NextTree());

				}
				stream_descDef.Reset();
				DebugLocation(80, 44);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:80:44: ( fuzzysetDef )*
				while ( stream_fuzzysetDef.HasNext )
				{
					DebugLocation(80, 44);
					adaptor.AddChild(root_1, stream_fuzzysetDef.NextTree());

				}
				stream_fuzzysetDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("fuzzyvarDef", 2);
			LeaveRule("fuzzyvarDef", 2);
			LeaveRule_fuzzyvarDef();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "fuzzyvarDef"); }
		return retval;

	}
	// $ANTLR end "fuzzyvarDef"

	partial void EnterRule_ruleDef();
	partial void LeaveRule_ruleDef();

	// $ANTLR start "ruleDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:83:1: ruleDef : 'rule' ID ( certaintyDecl | priorityDecl | descDef | weightDecl )* whenStatement 'end' -> ^( RULEDEF ID ( certaintyDecl )* ( priorityDecl )* ( descDef )* ( weightDecl )* whenStatement ) ;
	[GrammarRule("ruleDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ruleDef()
	{
		EnterRule_ruleDef();
		EnterRule("ruleDef", 3);
		TraceIn("ruleDef", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal12 = default(CommonToken);
		CommonToken ID13 = default(CommonToken);
		CommonToken string_literal19 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> certaintyDecl14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> priorityDecl15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> descDef16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> weightDecl17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal12_tree = default(CommonTree);
		CommonTree ID13_tree = default(CommonTree);
		CommonTree string_literal19_tree = default(CommonTree);
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_certaintyDecl=new RewriteRuleSubtreeStream(adaptor,"rule certaintyDecl");
		RewriteRuleSubtreeStream stream_priorityDecl=new RewriteRuleSubtreeStream(adaptor,"rule priorityDecl");
		RewriteRuleSubtreeStream stream_whenStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenStatement");
		RewriteRuleSubtreeStream stream_weightDecl=new RewriteRuleSubtreeStream(adaptor,"rule weightDecl");
		RewriteRuleSubtreeStream stream_descDef=new RewriteRuleSubtreeStream(adaptor,"rule descDef");
		try { DebugEnterRule(GrammarFileName, "ruleDef");
		DebugLocation(83, 5);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:84:6: ( 'rule' ID ( certaintyDecl | priorityDecl | descDef | weightDecl )* whenStatement 'end' -> ^( RULEDEF ID ( certaintyDecl )* ( priorityDecl )* ( descDef )* ( weightDecl )* whenStatement ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:84:8: 'rule' ID ( certaintyDecl | priorityDecl | descDef | weightDecl )* whenStatement 'end'
			{
			DebugLocation(84, 8);
			string_literal12=(CommonToken)Match(input,56,Follow._56_in_ruleDef300);  
			stream_56.Add(string_literal12);

			DebugLocation(84, 15);
			ID13=(CommonToken)Match(input,ID,Follow._ID_in_ruleDef302);  
			stream_ID.Add(ID13);

			DebugLocation(85, 8);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:85:8: ( certaintyDecl | priorityDecl | descDef | weightDecl )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=5;
				try { DebugEnterDecision(4, false);
				switch (input.LA(1))
				{
				case 46:
					{
					alt4 = 1;
					}
					break;
				case 54:
					{
					alt4 = 2;
					}
					break;
				case 48:
					{
					alt4 = 3;
					}
					break;
				case 62:
					{
					alt4 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:85:9: certaintyDecl
					{
					DebugLocation(85, 9);
					PushFollow(Follow._certaintyDecl_in_ruleDef313);
					certaintyDecl14=certaintyDecl();
					PopFollow();

					stream_certaintyDecl.Add(certaintyDecl14.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:86:12: priorityDecl
					{
					DebugLocation(86, 12);
					PushFollow(Follow._priorityDecl_in_ruleDef328);
					priorityDecl15=priorityDecl();
					PopFollow();

					stream_priorityDecl.Add(priorityDecl15.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:87:11: descDef
					{
					DebugLocation(87, 11);
					PushFollow(Follow._descDef_in_ruleDef342);
					descDef16=descDef();
					PopFollow();

					stream_descDef.Add(descDef16.Tree);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:88:8: weightDecl
					{
					DebugLocation(88, 8);
					PushFollow(Follow._weightDecl_in_ruleDef353);
					weightDecl17=weightDecl();
					PopFollow();

					stream_weightDecl.Add(weightDecl17.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(89, 8);
			PushFollow(Follow._whenStatement_in_ruleDef364);
			whenStatement18=whenStatement();
			PopFollow();

			stream_whenStatement.Add(whenStatement18.Tree);
			DebugLocation(90, 8);
			string_literal19=(CommonToken)Match(input,49,Follow._49_in_ruleDef382);  
			stream_49.Add(string_literal19);



			{
			// AST REWRITE
			// elements: priorityDecl, certaintyDecl, descDef, whenStatement, weightDecl, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 91:8: -> ^( RULEDEF ID ( certaintyDecl )* ( priorityDecl )* ( descDef )* ( weightDecl )* whenStatement )
			{
				DebugLocation(91, 11);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:91:11: ^( RULEDEF ID ( certaintyDecl )* ( priorityDecl )* ( descDef )* ( weightDecl )* whenStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(91, 13);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULEDEF, "RULEDEF"), root_1);

				DebugLocation(91, 21);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(91, 24);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:91:24: ( certaintyDecl )*
				while ( stream_certaintyDecl.HasNext )
				{
					DebugLocation(91, 24);
					adaptor.AddChild(root_1, stream_certaintyDecl.NextTree());

				}
				stream_certaintyDecl.Reset();
				DebugLocation(91, 39);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:91:39: ( priorityDecl )*
				while ( stream_priorityDecl.HasNext )
				{
					DebugLocation(91, 39);
					adaptor.AddChild(root_1, stream_priorityDecl.NextTree());

				}
				stream_priorityDecl.Reset();
				DebugLocation(91, 53);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:91:53: ( descDef )*
				while ( stream_descDef.HasNext )
				{
					DebugLocation(91, 53);
					adaptor.AddChild(root_1, stream_descDef.NextTree());

				}
				stream_descDef.Reset();
				DebugLocation(91, 62);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:91:62: ( weightDecl )*
				while ( stream_weightDecl.HasNext )
				{
					DebugLocation(91, 62);
					adaptor.AddChild(root_1, stream_weightDecl.NextTree());

				}
				stream_weightDecl.Reset();
				DebugLocation(91, 74);
				adaptor.AddChild(root_1, stream_whenStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("ruleDef", 3);
			LeaveRule("ruleDef", 3);
			LeaveRule_ruleDef();
		}
		DebugLocation(92, 5);
		} finally { DebugExitRule(GrammarFileName, "ruleDef"); }
		return retval;

	}
	// $ANTLR end "ruleDef"

	partial void EnterRule_rulesetDef();
	partial void LeaveRule_rulesetDef();

	// $ANTLR start "rulesetDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:94:1: rulesetDef : 'ruleset' ID ( descDef )+ 'contains' ( rulesetChoiceDef )+ -> ^( RULESETDEF ID ( descDef )+ ( rulesetChoiceDef )+ ) ;
	[GrammarRule("rulesetDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> rulesetDef()
	{
		EnterRule_rulesetDef();
		EnterRule("rulesetDef", 4);
		TraceIn("rulesetDef", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal20 = default(CommonToken);
		CommonToken ID21 = default(CommonToken);
		CommonToken string_literal23 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> descDef22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> rulesetChoiceDef24 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal20_tree = default(CommonTree);
		CommonTree ID21_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_rulesetChoiceDef=new RewriteRuleSubtreeStream(adaptor,"rule rulesetChoiceDef");
		RewriteRuleSubtreeStream stream_descDef=new RewriteRuleSubtreeStream(adaptor,"rule descDef");
		try { DebugEnterRule(GrammarFileName, "rulesetDef");
		DebugLocation(94, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:95:2: ( 'ruleset' ID ( descDef )+ 'contains' ( rulesetChoiceDef )+ -> ^( RULESETDEF ID ( descDef )+ ( rulesetChoiceDef )+ ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:95:4: 'ruleset' ID ( descDef )+ 'contains' ( rulesetChoiceDef )+
			{
			DebugLocation(95, 4);
			string_literal20=(CommonToken)Match(input,57,Follow._57_in_rulesetDef427);  
			stream_57.Add(string_literal20);

			DebugLocation(95, 14);
			ID21=(CommonToken)Match(input,ID,Follow._ID_in_rulesetDef429);  
			stream_ID.Add(ID21);

			DebugLocation(96, 5);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:96:5: ( descDef )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==48))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:96:5: descDef
					{
					DebugLocation(96, 5);
					PushFollow(Follow._descDef_in_rulesetDef436);
					descDef22=descDef();
					PopFollow();

					stream_descDef.Add(descDef22.Tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(97, 5);
			string_literal23=(CommonToken)Match(input,47,Follow._47_in_rulesetDef443);  
			stream_47.Add(string_literal23);

			DebugLocation(97, 16);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:97:16: ( rulesetChoiceDef )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==40||LA6_0==43))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:97:16: rulesetChoiceDef
					{
					DebugLocation(97, 16);
					PushFollow(Follow._rulesetChoiceDef_in_rulesetDef445);
					rulesetChoiceDef24=rulesetChoiceDef();
					PopFollow();

					stream_rulesetChoiceDef.Add(rulesetChoiceDef24.Tree);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }



			{
			// AST REWRITE
			// elements: rulesetChoiceDef, descDef, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 98:8: -> ^( RULESETDEF ID ( descDef )+ ( rulesetChoiceDef )+ )
			{
				DebugLocation(98, 11);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:98:11: ^( RULESETDEF ID ( descDef )+ ( rulesetChoiceDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(98, 13);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULESETDEF, "RULESETDEF"), root_1);

				DebugLocation(98, 24);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(98, 27);
				if (!(stream_descDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_descDef.HasNext )
				{
					DebugLocation(98, 27);
					adaptor.AddChild(root_1, stream_descDef.NextTree());

				}
				stream_descDef.Reset();
				DebugLocation(98, 36);
				if (!(stream_rulesetChoiceDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_rulesetChoiceDef.HasNext )
				{
					DebugLocation(98, 36);
					adaptor.AddChild(root_1, stream_rulesetChoiceDef.NextTree());

				}
				stream_rulesetChoiceDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("rulesetDef", 4);
			LeaveRule("rulesetDef", 4);
			LeaveRule_rulesetDef();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "rulesetDef"); }
		return retval;

	}
	// $ANTLR end "rulesetDef"

	partial void EnterRule_rulesetChoiceDef();
	partial void LeaveRule_rulesetChoiceDef();

	// $ANTLR start "rulesetChoiceDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:101:1: rulesetChoiceDef : ( ruleCollectionDef -> ^( RULECOLLECTIONDEFCHOICE ruleCollectionDef ) | 'all' -> ^( RULECOLLECTIONALLDEFCHOICE CONTAINSALL ) );
	[GrammarRule("rulesetChoiceDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> rulesetChoiceDef()
	{
		EnterRule_rulesetChoiceDef();
		EnterRule("rulesetChoiceDef", 5);
		TraceIn("rulesetChoiceDef", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal26 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> ruleCollectionDef25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_ruleCollectionDef=new RewriteRuleSubtreeStream(adaptor,"rule ruleCollectionDef");
		try { DebugEnterRule(GrammarFileName, "rulesetChoiceDef");
		DebugLocation(101, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:102:2: ( ruleCollectionDef -> ^( RULECOLLECTIONDEFCHOICE ruleCollectionDef ) | 'all' -> ^( RULECOLLECTIONALLDEFCHOICE CONTAINSALL ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==40))
			{
				alt7 = 1;
			}
			else if ((LA7_0==43))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:102:4: ruleCollectionDef
				{
				DebugLocation(102, 4);
				PushFollow(Follow._ruleCollectionDef_in_rulesetChoiceDef479);
				ruleCollectionDef25=ruleCollectionDef();
				PopFollow();

				stream_ruleCollectionDef.Add(ruleCollectionDef25.Tree);


				{
				// AST REWRITE
				// elements: ruleCollectionDef
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 102:22: -> ^( RULECOLLECTIONDEFCHOICE ruleCollectionDef )
				{
					DebugLocation(102, 25);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:102:25: ^( RULECOLLECTIONDEFCHOICE ruleCollectionDef )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(102, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULECOLLECTIONDEFCHOICE, "RULECOLLECTIONDEFCHOICE"), root_1);

					DebugLocation(102, 51);
					adaptor.AddChild(root_1, stream_ruleCollectionDef.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:103:5: 'all'
				{
				DebugLocation(103, 5);
				string_literal26=(CommonToken)Match(input,43,Follow._43_in_rulesetChoiceDef493);  
				stream_43.Add(string_literal26);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 103:11: -> ^( RULECOLLECTIONALLDEFCHOICE CONTAINSALL )
				{
					DebugLocation(103, 14);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:103:14: ^( RULECOLLECTIONALLDEFCHOICE CONTAINSALL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(103, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULECOLLECTIONALLDEFCHOICE, "RULECOLLECTIONALLDEFCHOICE"), root_1);

					DebugLocation(103, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(CONTAINSALL, "CONTAINSALL"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("rulesetChoiceDef", 5);
			LeaveRule("rulesetChoiceDef", 5);
			LeaveRule_rulesetChoiceDef();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "rulesetChoiceDef"); }
		return retval;

	}
	// $ANTLR end "rulesetChoiceDef"

	partial void EnterRule_ruleCollectionDef();
	partial void LeaveRule_ruleCollectionDef();

	// $ANTLR start "ruleCollectionDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:106:1: ruleCollectionDef : '(' ID ( ( ',' ) ID )* ')' -> ^( RULECOLLECTIONDEF ( ID )* ) ;
	[GrammarRule("ruleCollectionDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ruleCollectionDef()
	{
		EnterRule_ruleCollectionDef();
		EnterRule("ruleCollectionDef", 6);
		TraceIn("ruleCollectionDef", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal27 = default(CommonToken);
		CommonToken ID28 = default(CommonToken);
		CommonToken char_literal29 = default(CommonToken);
		CommonToken ID30 = default(CommonToken);
		CommonToken char_literal31 = default(CommonToken);

		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree ID28_tree = default(CommonTree);
		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree ID30_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "ruleCollectionDef");
		DebugLocation(106, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:2: ( '(' ID ( ( ',' ) ID )* ')' -> ^( RULECOLLECTIONDEF ( ID )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:4: '(' ID ( ( ',' ) ID )* ')'
			{
			DebugLocation(107, 4);
			char_literal27=(CommonToken)Match(input,40,Follow._40_in_ruleCollectionDef512);  
			stream_40.Add(char_literal27);

			DebugLocation(107, 8);
			ID28=(CommonToken)Match(input,ID,Follow._ID_in_ruleCollectionDef514);  
			stream_ID.Add(ID28);

			DebugLocation(107, 11);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:11: ( ( ',' ) ID )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==42))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:12: ( ',' ) ID
					{
					DebugLocation(107, 12);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:12: ( ',' )
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:107:13: ','
					{
					DebugLocation(107, 13);
					char_literal29=(CommonToken)Match(input,42,Follow._42_in_ruleCollectionDef518);  
					stream_42.Add(char_literal29);


					}

					DebugLocation(107, 18);
					ID30=(CommonToken)Match(input,ID,Follow._ID_in_ruleCollectionDef521);  
					stream_ID.Add(ID30);


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(107, 23);
			char_literal31=(CommonToken)Match(input,41,Follow._41_in_ruleCollectionDef525);  
			stream_41.Add(char_literal31);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:2: -> ^( RULECOLLECTIONDEF ( ID )* )
			{
				DebugLocation(108, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:108:5: ^( RULECOLLECTIONDEF ( ID )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(108, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RULECOLLECTIONDEF, "RULECOLLECTIONDEF"), root_1);

				DebugLocation(108, 25);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:108:25: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(108, 25);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("ruleCollectionDef", 6);
			LeaveRule("ruleCollectionDef", 6);
			LeaveRule_ruleCollectionDef();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleCollectionDef"); }
		return retval;

	}
	// $ANTLR end "ruleCollectionDef"

	partial void EnterRule_executeDef();
	partial void LeaveRule_executeDef();

	// $ANTLR start "executeDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:111:1: executeDef : 'execute' '(' ID ( ( ',' ) ID )* ')' -> ^( EXECUTEDEF ( ID )* ) ;
	[GrammarRule("executeDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> executeDef()
	{
		EnterRule_executeDef();
		EnterRule("executeDef", 7);
		TraceIn("executeDef", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal32 = default(CommonToken);
		CommonToken char_literal33 = default(CommonToken);
		CommonToken ID34 = default(CommonToken);
		CommonToken char_literal35 = default(CommonToken);
		CommonToken ID36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);

		CommonTree string_literal32_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree ID34_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree ID36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		try { DebugEnterRule(GrammarFileName, "executeDef");
		DebugLocation(111, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:2: ( 'execute' '(' ID ( ( ',' ) ID )* ')' -> ^( EXECUTEDEF ( ID )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:4: 'execute' '(' ID ( ( ',' ) ID )* ')'
			{
			DebugLocation(112, 4);
			string_literal32=(CommonToken)Match(input,50,Follow._50_in_executeDef546);  
			stream_50.Add(string_literal32);

			DebugLocation(112, 14);
			char_literal33=(CommonToken)Match(input,40,Follow._40_in_executeDef548);  
			stream_40.Add(char_literal33);

			DebugLocation(112, 18);
			ID34=(CommonToken)Match(input,ID,Follow._ID_in_executeDef550);  
			stream_ID.Add(ID34);

			DebugLocation(112, 21);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:21: ( ( ',' ) ID )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==42))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:22: ( ',' ) ID
					{
					DebugLocation(112, 22);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:22: ( ',' )
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:112:23: ','
					{
					DebugLocation(112, 23);
					char_literal35=(CommonToken)Match(input,42,Follow._42_in_executeDef554);  
					stream_42.Add(char_literal35);


					}

					DebugLocation(112, 28);
					ID36=(CommonToken)Match(input,ID,Follow._ID_in_executeDef557);  
					stream_ID.Add(ID36);


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(112, 33);
			char_literal37=(CommonToken)Match(input,41,Follow._41_in_executeDef561);  
			stream_41.Add(char_literal37);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 113:7: -> ^( EXECUTEDEF ( ID )* )
			{
				DebugLocation(113, 10);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:113:10: ^( EXECUTEDEF ( ID )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(113, 12);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXECUTEDEF, "EXECUTEDEF"), root_1);

				DebugLocation(113, 23);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:113:23: ( ID )*
				while ( stream_ID.HasNext )
				{
					DebugLocation(113, 23);
					adaptor.AddChild(root_1, stream_ID.NextNode());

				}
				stream_ID.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("executeDef", 7);
			LeaveRule("executeDef", 7);
			LeaveRule_executeDef();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "executeDef"); }
		return retval;

	}
	// $ANTLR end "executeDef"

	partial void EnterRule_fuzzyrangeDef();
	partial void LeaveRule_fuzzyrangeDef();

	// $ANTLR start "fuzzyrangeDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:119:1: fuzzyrangeDef : 'range' '(' number ',' number ')' -> ^( FUZZYRANGEDEF ( number )* ) ;
	[GrammarRule("fuzzyrangeDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fuzzyrangeDef()
	{
		EnterRule_fuzzyrangeDef();
		EnterRule("fuzzyrangeDef", 8);
		TraceIn("fuzzyrangeDef", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal38 = default(CommonToken);
		CommonToken char_literal39 = default(CommonToken);
		CommonToken char_literal41 = default(CommonToken);
		CommonToken char_literal43 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> number40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> number42 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal38_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "fuzzyrangeDef");
		DebugLocation(119, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:120:2: ( 'range' '(' number ',' number ')' -> ^( FUZZYRANGEDEF ( number )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:120:4: 'range' '(' number ',' number ')'
			{
			DebugLocation(120, 4);
			string_literal38=(CommonToken)Match(input,55,Follow._55_in_fuzzyrangeDef591);  
			stream_55.Add(string_literal38);

			DebugLocation(120, 12);
			char_literal39=(CommonToken)Match(input,40,Follow._40_in_fuzzyrangeDef593);  
			stream_40.Add(char_literal39);

			DebugLocation(120, 16);
			PushFollow(Follow._number_in_fuzzyrangeDef595);
			number40=number();
			PopFollow();

			stream_number.Add(number40.Tree);
			DebugLocation(120, 23);
			char_literal41=(CommonToken)Match(input,42,Follow._42_in_fuzzyrangeDef597);  
			stream_42.Add(char_literal41);

			DebugLocation(120, 27);
			PushFollow(Follow._number_in_fuzzyrangeDef599);
			number42=number();
			PopFollow();

			stream_number.Add(number42.Tree);
			DebugLocation(120, 34);
			char_literal43=(CommonToken)Match(input,41,Follow._41_in_fuzzyrangeDef601);  
			stream_41.Add(char_literal43);



			{
			// AST REWRITE
			// elements: number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 121:2: -> ^( FUZZYRANGEDEF ( number )* )
			{
				DebugLocation(121, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:121:5: ^( FUZZYRANGEDEF ( number )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(121, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUZZYRANGEDEF, "FUZZYRANGEDEF"), root_1);

				DebugLocation(121, 21);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:121:21: ( number )*
				while ( stream_number.HasNext )
				{
					DebugLocation(121, 21);
					adaptor.AddChild(root_1, stream_number.NextTree());

				}
				stream_number.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("fuzzyrangeDef", 8);
			LeaveRule("fuzzyrangeDef", 8);
			LeaveRule_fuzzyrangeDef();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "fuzzyrangeDef"); }
		return retval;

	}
	// $ANTLR end "fuzzyrangeDef"

	partial void EnterRule_fuzzysetDef();
	partial void LeaveRule_fuzzysetDef();

	// $ANTLR start "fuzzysetDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:124:1: fuzzysetDef : ( fuzzysetShapeDef )+ '(' ID ',' number ',' number ( ',' )* ( number )* ')' -> ^( FUZZYSETDEF ( fuzzysetShapeDef )+ ID ( number )* ) ;
	[GrammarRule("fuzzysetDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fuzzysetDef()
	{
		EnterRule_fuzzysetDef();
		EnterRule("fuzzysetDef", 9);
		TraceIn("fuzzysetDef", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal45 = default(CommonToken);
		CommonToken ID46 = default(CommonToken);
		CommonToken char_literal47 = default(CommonToken);
		CommonToken char_literal49 = default(CommonToken);
		CommonToken char_literal51 = default(CommonToken);
		CommonToken char_literal53 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fuzzysetShapeDef44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> number48 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> number50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> number52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree ID46_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fuzzysetShapeDef=new RewriteRuleSubtreeStream(adaptor,"rule fuzzysetShapeDef");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "fuzzysetDef");
		DebugLocation(124, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:125:2: ( ( fuzzysetShapeDef )+ '(' ID ',' number ',' number ( ',' )* ( number )* ')' -> ^( FUZZYSETDEF ( fuzzysetShapeDef )+ ID ( number )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:125:4: ( fuzzysetShapeDef )+ '(' ID ',' number ',' number ( ',' )* ( number )* ')'
			{
			DebugLocation(125, 4);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:125:4: ( fuzzysetShapeDef )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if (((LA10_0>=58 && LA10_0<=60)))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:125:4: fuzzysetShapeDef
					{
					DebugLocation(125, 4);
					PushFollow(Follow._fuzzysetShapeDef_in_fuzzysetDef625);
					fuzzysetShapeDef44=fuzzysetShapeDef();
					PopFollow();

					stream_fuzzysetShapeDef.Add(fuzzysetShapeDef44.Tree);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(126, 4);
			char_literal45=(CommonToken)Match(input,40,Follow._40_in_fuzzysetDef631);  
			stream_40.Add(char_literal45);

			DebugLocation(127, 4);
			ID46=(CommonToken)Match(input,ID,Follow._ID_in_fuzzysetDef637);  
			stream_ID.Add(ID46);

			DebugLocation(127, 7);
			char_literal47=(CommonToken)Match(input,42,Follow._42_in_fuzzysetDef639);  
			stream_42.Add(char_literal47);

			DebugLocation(127, 11);
			PushFollow(Follow._number_in_fuzzysetDef641);
			number48=number();
			PopFollow();

			stream_number.Add(number48.Tree);
			DebugLocation(127, 18);
			char_literal49=(CommonToken)Match(input,42,Follow._42_in_fuzzysetDef643);  
			stream_42.Add(char_literal49);

			DebugLocation(127, 22);
			PushFollow(Follow._number_in_fuzzysetDef645);
			number50=number();
			PopFollow();

			stream_number.Add(number50.Tree);
			DebugLocation(127, 29);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:127:29: ( ',' )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==42))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:127:29: ','
					{
					DebugLocation(127, 29);
					char_literal51=(CommonToken)Match(input,42,Follow._42_in_fuzzysetDef647);  
					stream_42.Add(char_literal51);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(127, 34);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:127:34: ( number )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==FLOAT||LA12_0==INTEGER))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:127:34: number
					{
					DebugLocation(127, 34);
					PushFollow(Follow._number_in_fuzzysetDef650);
					number52=number();
					PopFollow();

					stream_number.Add(number52.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(128, 4);
			char_literal53=(CommonToken)Match(input,41,Follow._41_in_fuzzysetDef656);  
			stream_41.Add(char_literal53);



			{
			// AST REWRITE
			// elements: ID, fuzzysetShapeDef, number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 129:6: -> ^( FUZZYSETDEF ( fuzzysetShapeDef )+ ID ( number )* )
			{
				DebugLocation(129, 9);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:129:9: ^( FUZZYSETDEF ( fuzzysetShapeDef )+ ID ( number )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(129, 11);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUZZYSETDEF, "FUZZYSETDEF"), root_1);

				DebugLocation(129, 23);
				if (!(stream_fuzzysetShapeDef.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_fuzzysetShapeDef.HasNext )
				{
					DebugLocation(129, 23);
					adaptor.AddChild(root_1, stream_fuzzysetShapeDef.NextTree());

				}
				stream_fuzzysetShapeDef.Reset();
				DebugLocation(129, 41);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(129, 44);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:129:44: ( number )*
				while ( stream_number.HasNext )
				{
					DebugLocation(129, 44);
					adaptor.AddChild(root_1, stream_number.NextTree());

				}
				stream_number.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("fuzzysetDef", 9);
			LeaveRule("fuzzysetDef", 9);
			LeaveRule_fuzzysetDef();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "fuzzysetDef"); }
		return retval;

	}
	// $ANTLR end "fuzzysetDef"

	partial void EnterRule_fuzzysetShapeDef();
	partial void LeaveRule_fuzzysetShapeDef();

	// $ANTLR start "fuzzysetShapeDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:132:1: fuzzysetShapeDef : ( 'set_\\\\' -> ^( SHAPES ) | 'set_/\\\\' -> ^( SHAPEP ) | 'set_/' -> ^( SHAPEZ ) ) ;
	[GrammarRule("fuzzysetShapeDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fuzzysetShapeDef()
	{
		EnterRule_fuzzysetShapeDef();
		EnterRule("fuzzysetShapeDef", 10);
		TraceIn("fuzzysetShapeDef", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal54 = default(CommonToken);
		CommonToken string_literal55 = default(CommonToken);
		CommonToken string_literal56 = default(CommonToken);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree string_literal55_tree = default(CommonTree);
		CommonTree string_literal56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		try { DebugEnterRule(GrammarFileName, "fuzzysetShapeDef");
		DebugLocation(132, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:133:2: ( ( 'set_\\\\' -> ^( SHAPES ) | 'set_/\\\\' -> ^( SHAPEP ) | 'set_/' -> ^( SHAPEZ ) ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:133:4: ( 'set_\\\\' -> ^( SHAPES ) | 'set_/\\\\' -> ^( SHAPEP ) | 'set_/' -> ^( SHAPEZ ) )
			{
			DebugLocation(133, 4);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:133:4: ( 'set_\\\\' -> ^( SHAPES ) | 'set_/\\\\' -> ^( SHAPEP ) | 'set_/' -> ^( SHAPEZ ) )
			int alt13=3;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 60:
				{
				alt13 = 1;
				}
				break;
			case 59:
				{
				alt13 = 2;
				}
				break;
			case 58:
				{
				alt13 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:134:7: 'set_\\\\'
				{
				DebugLocation(134, 7);
				string_literal54=(CommonToken)Match(input,60,Follow._60_in_fuzzysetShapeDef695);  
				stream_60.Add(string_literal54);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 134:16: -> ^( SHAPES )
				{
					DebugLocation(134, 19);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:134:19: ^( SHAPES )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(134, 21);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SHAPES, "SHAPES"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:135:7: 'set_/\\\\'
				{
				DebugLocation(135, 7);
				string_literal55=(CommonToken)Match(input,59,Follow._59_in_fuzzysetShapeDef711);  
				stream_59.Add(string_literal55);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 135:17: -> ^( SHAPEP )
				{
					DebugLocation(135, 20);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:135:20: ^( SHAPEP )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(135, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SHAPEP, "SHAPEP"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:136:7: 'set_/'
				{
				DebugLocation(136, 7);
				string_literal56=(CommonToken)Match(input,58,Follow._58_in_fuzzysetShapeDef725);  
				stream_58.Add(string_literal56);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 136:15: -> ^( SHAPEZ )
				{
					DebugLocation(136, 18);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:136:18: ^( SHAPEZ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(136, 20);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SHAPEZ, "SHAPEZ"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("fuzzysetShapeDef", 10);
			LeaveRule("fuzzysetShapeDef", 10);
			LeaveRule_fuzzysetShapeDef();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "fuzzysetShapeDef"); }
		return retval;

	}
	// $ANTLR end "fuzzysetShapeDef"

	partial void EnterRule_descDef();
	partial void LeaveRule_descDef();

	// $ANTLR start "descDef"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:142:1: descDef : 'desc' '(' STRING_LITERAL ')' -> ^( DESCDEF STRING_LITERAL ) ;
	[GrammarRule("descDef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> descDef()
	{
		EnterRule_descDef();
		EnterRule("descDef", 11);
		TraceIn("descDef", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal57 = default(CommonToken);
		CommonToken char_literal58 = default(CommonToken);
		CommonToken STRING_LITERAL59 = default(CommonToken);
		CommonToken char_literal60 = default(CommonToken);

		CommonTree string_literal57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree STRING_LITERAL59_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		try { DebugEnterRule(GrammarFileName, "descDef");
		DebugLocation(142, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:143:2: ( 'desc' '(' STRING_LITERAL ')' -> ^( DESCDEF STRING_LITERAL ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:143:4: 'desc' '(' STRING_LITERAL ')'
			{
			DebugLocation(143, 4);
			string_literal57=(CommonToken)Match(input,48,Follow._48_in_descDef752);  
			stream_48.Add(string_literal57);

			DebugLocation(143, 11);
			char_literal58=(CommonToken)Match(input,40,Follow._40_in_descDef754);  
			stream_40.Add(char_literal58);

			DebugLocation(143, 15);
			STRING_LITERAL59=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_descDef756);  
			stream_STRING_LITERAL.Add(STRING_LITERAL59);

			DebugLocation(143, 30);
			char_literal60=(CommonToken)Match(input,41,Follow._41_in_descDef758);  
			stream_41.Add(char_literal60);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 144:2: -> ^( DESCDEF STRING_LITERAL )
			{
				DebugLocation(144, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:144:5: ^( DESCDEF STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(144, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DESCDEF, "DESCDEF"), root_1);

				DebugLocation(144, 15);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("descDef", 11);
			LeaveRule("descDef", 11);
			LeaveRule_descDef();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "descDef"); }
		return retval;

	}
	// $ANTLR end "descDef"

	partial void EnterRule_certaintyDecl();
	partial void LeaveRule_certaintyDecl();

	// $ANTLR start "certaintyDecl"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:147:1: certaintyDecl : 'certainty' '(' number ')' -> ^( CERTAINTYDEF number ) ;
	[GrammarRule("certaintyDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> certaintyDecl()
	{
		EnterRule_certaintyDecl();
		EnterRule("certaintyDecl", 12);
		TraceIn("certaintyDecl", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal61 = default(CommonToken);
		CommonToken char_literal62 = default(CommonToken);
		CommonToken char_literal64 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> number63 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal61_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "certaintyDecl");
		DebugLocation(147, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:148:2: ( 'certainty' '(' number ')' -> ^( CERTAINTYDEF number ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:148:4: 'certainty' '(' number ')'
			{
			DebugLocation(148, 4);
			string_literal61=(CommonToken)Match(input,46,Follow._46_in_certaintyDecl780);  
			stream_46.Add(string_literal61);

			DebugLocation(148, 16);
			char_literal62=(CommonToken)Match(input,40,Follow._40_in_certaintyDecl782);  
			stream_40.Add(char_literal62);

			DebugLocation(148, 20);
			PushFollow(Follow._number_in_certaintyDecl784);
			number63=number();
			PopFollow();

			stream_number.Add(number63.Tree);
			DebugLocation(148, 27);
			char_literal64=(CommonToken)Match(input,41,Follow._41_in_certaintyDecl786);  
			stream_41.Add(char_literal64);



			{
			// AST REWRITE
			// elements: number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 149:2: -> ^( CERTAINTYDEF number )
			{
				DebugLocation(149, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:149:5: ^( CERTAINTYDEF number )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(149, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CERTAINTYDEF, "CERTAINTYDEF"), root_1);

				DebugLocation(149, 20);
				adaptor.AddChild(root_1, stream_number.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("certaintyDecl", 12);
			LeaveRule("certaintyDecl", 12);
			LeaveRule_certaintyDecl();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "certaintyDecl"); }
		return retval;

	}
	// $ANTLR end "certaintyDecl"

	partial void EnterRule_priorityDecl();
	partial void LeaveRule_priorityDecl();

	// $ANTLR start "priorityDecl"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:152:1: priorityDecl : 'priority' '(' number ')' -> ^( PRIORITYDEF number ) ;
	[GrammarRule("priorityDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> priorityDecl()
	{
		EnterRule_priorityDecl();
		EnterRule("priorityDecl", 13);
		TraceIn("priorityDecl", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal65 = default(CommonToken);
		CommonToken char_literal66 = default(CommonToken);
		CommonToken char_literal68 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> number67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal65_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		CommonTree char_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "priorityDecl");
		DebugLocation(152, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:153:2: ( 'priority' '(' number ')' -> ^( PRIORITYDEF number ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:153:4: 'priority' '(' number ')'
			{
			DebugLocation(153, 4);
			string_literal65=(CommonToken)Match(input,54,Follow._54_in_priorityDecl806);  
			stream_54.Add(string_literal65);

			DebugLocation(153, 15);
			char_literal66=(CommonToken)Match(input,40,Follow._40_in_priorityDecl808);  
			stream_40.Add(char_literal66);

			DebugLocation(153, 19);
			PushFollow(Follow._number_in_priorityDecl810);
			number67=number();
			PopFollow();

			stream_number.Add(number67.Tree);
			DebugLocation(153, 26);
			char_literal68=(CommonToken)Match(input,41,Follow._41_in_priorityDecl812);  
			stream_41.Add(char_literal68);



			{
			// AST REWRITE
			// elements: number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 154:2: -> ^( PRIORITYDEF number )
			{
				DebugLocation(154, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:154:5: ^( PRIORITYDEF number )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(154, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRIORITYDEF, "PRIORITYDEF"), root_1);

				DebugLocation(154, 19);
				adaptor.AddChild(root_1, stream_number.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("priorityDecl", 13);
			LeaveRule("priorityDecl", 13);
			LeaveRule_priorityDecl();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "priorityDecl"); }
		return retval;

	}
	// $ANTLR end "priorityDecl"

	partial void EnterRule_weightDecl();
	partial void LeaveRule_weightDecl();

	// $ANTLR start "weightDecl"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:157:1: weightDecl : 'weight' '(' number ')' -> ^( WEIGHTDEF number ) ;
	[GrammarRule("weightDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> weightDecl()
	{
		EnterRule_weightDecl();
		EnterRule("weightDecl", 14);
		TraceIn("weightDecl", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal69 = default(CommonToken);
		CommonToken char_literal70 = default(CommonToken);
		CommonToken char_literal72 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> number71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "weightDecl");
		DebugLocation(157, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:158:2: ( 'weight' '(' number ')' -> ^( WEIGHTDEF number ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:158:4: 'weight' '(' number ')'
			{
			DebugLocation(158, 4);
			string_literal69=(CommonToken)Match(input,62,Follow._62_in_weightDecl834);  
			stream_62.Add(string_literal69);

			DebugLocation(158, 13);
			char_literal70=(CommonToken)Match(input,40,Follow._40_in_weightDecl836);  
			stream_40.Add(char_literal70);

			DebugLocation(158, 17);
			PushFollow(Follow._number_in_weightDecl838);
			number71=number();
			PopFollow();

			stream_number.Add(number71.Tree);
			DebugLocation(158, 24);
			char_literal72=(CommonToken)Match(input,41,Follow._41_in_weightDecl840);  
			stream_41.Add(char_literal72);



			{
			// AST REWRITE
			// elements: number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:2: -> ^( WEIGHTDEF number )
			{
				DebugLocation(159, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:159:5: ^( WEIGHTDEF number )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WEIGHTDEF, "WEIGHTDEF"), root_1);

				DebugLocation(159, 17);
				adaptor.AddChild(root_1, stream_number.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("weightDecl", 14);
			LeaveRule("weightDecl", 14);
			LeaveRule_weightDecl();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "weightDecl"); }
		return retval;

	}
	// $ANTLR end "weightDecl"

	partial void EnterRule_whenStatement();
	partial void LeaveRule_whenStatement();

	// $ANTLR start "whenStatement"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:162:1: whenStatement : 'when' antecedents 'then' consequent -> ^( WHENDEF antecedents consequent ) ;
	[GrammarRule("whenStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenStatement()
	{
		EnterRule_whenStatement();
		EnterRule("whenStatement", 15);
		TraceIn("whenStatement", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal73 = default(CommonToken);
		CommonToken string_literal75 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> antecedents74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> consequent76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal73_tree = default(CommonTree);
		CommonTree string_literal75_tree = default(CommonTree);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_consequent=new RewriteRuleSubtreeStream(adaptor,"rule consequent");
		RewriteRuleSubtreeStream stream_antecedents=new RewriteRuleSubtreeStream(adaptor,"rule antecedents");
		try { DebugEnterRule(GrammarFileName, "whenStatement");
		DebugLocation(162, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:163:2: ( 'when' antecedents 'then' consequent -> ^( WHENDEF antecedents consequent ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:163:4: 'when' antecedents 'then' consequent
			{
			DebugLocation(163, 4);
			string_literal73=(CommonToken)Match(input,63,Follow._63_in_whenStatement861);  
			stream_63.Add(string_literal73);

			DebugLocation(163, 11);
			PushFollow(Follow._antecedents_in_whenStatement863);
			antecedents74=antecedents();
			PopFollow();

			stream_antecedents.Add(antecedents74.Tree);
			DebugLocation(163, 23);
			string_literal75=(CommonToken)Match(input,61,Follow._61_in_whenStatement865);  
			stream_61.Add(string_literal75);

			DebugLocation(163, 30);
			PushFollow(Follow._consequent_in_whenStatement867);
			consequent76=consequent();
			PopFollow();

			stream_consequent.Add(consequent76.Tree);


			{
			// AST REWRITE
			// elements: consequent, antecedents
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 164:2: -> ^( WHENDEF antecedents consequent )
			{
				DebugLocation(164, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:164:5: ^( WHENDEF antecedents consequent )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(164, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHENDEF, "WHENDEF"), root_1);

				DebugLocation(164, 15);
				adaptor.AddChild(root_1, stream_antecedents.NextTree());
				DebugLocation(164, 27);
				adaptor.AddChild(root_1, stream_consequent.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("whenStatement", 15);
			LeaveRule("whenStatement", 15);
			LeaveRule_whenStatement();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "whenStatement"); }
		return retval;

	}
	// $ANTLR end "whenStatement"

	partial void EnterRule_consequent();
	partial void LeaveRule_consequent();

	// $ANTLR start "consequent"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:167:1: consequent : variable 'is' ID -> ^( CONSEQUENTDEF variable ID ) ;
	[GrammarRule("consequent")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> consequent()
	{
		EnterRule_consequent();
		EnterRule("consequent", 16);
		TraceIn("consequent", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal78 = default(CommonToken);
		CommonToken ID79 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variable77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal78_tree = default(CommonTree);
		CommonTree ID79_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "consequent");
		DebugLocation(167, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:168:2: ( variable 'is' ID -> ^( CONSEQUENTDEF variable ID ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:168:4: variable 'is' ID
			{
			DebugLocation(168, 4);
			PushFollow(Follow._variable_in_consequent890);
			variable77=variable();
			PopFollow();

			stream_variable.Add(variable77.Tree);
			DebugLocation(168, 13);
			string_literal78=(CommonToken)Match(input,52,Follow._52_in_consequent892);  
			stream_52.Add(string_literal78);

			DebugLocation(168, 18);
			ID79=(CommonToken)Match(input,ID,Follow._ID_in_consequent894);  
			stream_ID.Add(ID79);



			{
			// AST REWRITE
			// elements: variable, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:2: -> ^( CONSEQUENTDEF variable ID )
			{
				DebugLocation(169, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:169:5: ^( CONSEQUENTDEF variable ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONSEQUENTDEF, "CONSEQUENTDEF"), root_1);

				DebugLocation(169, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(169, 30);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("consequent", 16);
			LeaveRule("consequent", 16);
			LeaveRule_consequent();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "consequent"); }
		return retval;

	}
	// $ANTLR end "consequent"

	partial void EnterRule_antecedents();
	partial void LeaveRule_antecedents();

	// $ANTLR start "antecedents"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:172:1: antecedents : antecedent ( operator antecedent )* -> ^( ANTECEDENTSDEF ( antecedent )* ( operator )* ) ;
	[GrammarRule("antecedents")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> antecedents()
	{
		EnterRule_antecedents();
		EnterRule("antecedents", 17);
		TraceIn("antecedents", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> antecedent80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> operator81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> antecedent82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_antecedent=new RewriteRuleSubtreeStream(adaptor,"rule antecedent");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "antecedents");
		DebugLocation(172, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:173:2: ( antecedent ( operator antecedent )* -> ^( ANTECEDENTSDEF ( antecedent )* ( operator )* ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:173:4: antecedent ( operator antecedent )*
			{
			DebugLocation(173, 4);
			PushFollow(Follow._antecedent_in_antecedents917);
			antecedent80=antecedent();
			PopFollow();

			stream_antecedent.Add(antecedent80.Tree);
			DebugLocation(173, 15);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:173:15: ( operator antecedent )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==44||LA14_0==53))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:173:16: operator antecedent
					{
					DebugLocation(173, 16);
					PushFollow(Follow._operator_in_antecedents920);
					operator81=@operator();
					PopFollow();

					stream_operator.Add(operator81.Tree);
					DebugLocation(173, 25);
					PushFollow(Follow._antecedent_in_antecedents922);
					antecedent82=antecedent();
					PopFollow();

					stream_antecedent.Add(antecedent82.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: operator, antecedent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:2: -> ^( ANTECEDENTSDEF ( antecedent )* ( operator )* )
			{
				DebugLocation(174, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:174:5: ^( ANTECEDENTSDEF ( antecedent )* ( operator )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANTECEDENTSDEF, "ANTECEDENTSDEF"), root_1);

				DebugLocation(174, 22);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:174:22: ( antecedent )*
				while ( stream_antecedent.HasNext )
				{
					DebugLocation(174, 22);
					adaptor.AddChild(root_1, stream_antecedent.NextTree());

				}
				stream_antecedent.Reset();
				DebugLocation(174, 34);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:174:34: ( operator )*
				while ( stream_operator.HasNext )
				{
					DebugLocation(174, 34);
					adaptor.AddChild(root_1, stream_operator.NextTree());

				}
				stream_operator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("antecedents", 17);
			LeaveRule("antecedents", 17);
			LeaveRule_antecedents();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "antecedents"); }
		return retval;

	}
	// $ANTLR end "antecedents"

	partial void EnterRule_antecedent();
	partial void LeaveRule_antecedent();

	// $ANTLR start "antecedent"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:177:1: antecedent : '(' variable 'is' ID ')' -> ^( ANTECEDENTDEF variable ID ) ;
	[GrammarRule("antecedent")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> antecedent()
	{
		EnterRule_antecedent();
		EnterRule("antecedent", 18);
		TraceIn("antecedent", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal83 = default(CommonToken);
		CommonToken string_literal85 = default(CommonToken);
		CommonToken ID86 = default(CommonToken);
		CommonToken char_literal87 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variable84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree string_literal85_tree = default(CommonTree);
		CommonTree ID86_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "antecedent");
		DebugLocation(177, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:178:2: ( '(' variable 'is' ID ')' -> ^( ANTECEDENTDEF variable ID ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:178:4: '(' variable 'is' ID ')'
			{
			DebugLocation(178, 4);
			char_literal83=(CommonToken)Match(input,40,Follow._40_in_antecedent948);  
			stream_40.Add(char_literal83);

			DebugLocation(178, 8);
			PushFollow(Follow._variable_in_antecedent950);
			variable84=variable();
			PopFollow();

			stream_variable.Add(variable84.Tree);
			DebugLocation(178, 17);
			string_literal85=(CommonToken)Match(input,52,Follow._52_in_antecedent952);  
			stream_52.Add(string_literal85);

			DebugLocation(178, 22);
			ID86=(CommonToken)Match(input,ID,Follow._ID_in_antecedent954);  
			stream_ID.Add(ID86);

			DebugLocation(178, 25);
			char_literal87=(CommonToken)Match(input,41,Follow._41_in_antecedent956);  
			stream_41.Add(char_literal87);



			{
			// AST REWRITE
			// elements: ID, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 179:2: -> ^( ANTECEDENTDEF variable ID )
			{
				DebugLocation(179, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:179:5: ^( ANTECEDENTDEF variable ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(179, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ANTECEDENTDEF, "ANTECEDENTDEF"), root_1);

				DebugLocation(179, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(179, 30);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("antecedent", 18);
			LeaveRule("antecedent", 18);
			LeaveRule_antecedent();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "antecedent"); }
		return retval;

	}
	// $ANTLR end "antecedent"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:185:1: operator : ( 'and' -> ^( OPERATORDEF 'and' ) | 'or' -> ^( OPERATORDEF 'or' ) );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 19);
		TraceIn("operator", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal88 = default(CommonToken);
		CommonToken string_literal89 = default(CommonToken);

		CommonTree string_literal88_tree = default(CommonTree);
		CommonTree string_literal89_tree = default(CommonTree);
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(185, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:186:2: ( 'and' -> ^( OPERATORDEF 'and' ) | 'or' -> ^( OPERATORDEF 'or' ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==44))
			{
				alt15 = 1;
			}
			else if ((LA15_0==53))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:186:4: 'and'
				{
				DebugLocation(186, 4);
				string_literal88=(CommonToken)Match(input,44,Follow._44_in_operator982);  
				stream_44.Add(string_literal88);



				{
				// AST REWRITE
				// elements: 44
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 186:11: -> ^( OPERATORDEF 'and' )
				{
					DebugLocation(186, 14);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:186:14: ^( OPERATORDEF 'and' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(186, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OPERATORDEF, "OPERATORDEF"), root_1);

					DebugLocation(186, 28);
					adaptor.AddChild(root_1, stream_44.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:187:5: 'or'
				{
				DebugLocation(187, 5);
				string_literal89=(CommonToken)Match(input,53,Follow._53_in_operator998);  
				stream_53.Add(string_literal89);



				{
				// AST REWRITE
				// elements: 53
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 187:11: -> ^( OPERATORDEF 'or' )
				{
					DebugLocation(187, 14);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:187:14: ^( OPERATORDEF 'or' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(187, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OPERATORDEF, "OPERATORDEF"), root_1);

					DebugLocation(187, 28);
					adaptor.AddChild(root_1, stream_53.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("operator", 19);
			LeaveRule("operator", 19);
			LeaveRule_operator();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:190:1: variable : '$' ID -> ^( VARIABLEDEF ID ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 20);
		TraceIn("variable", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal90 = default(CommonToken);
		CommonToken ID91 = default(CommonToken);

		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree ID91_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(190, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:191:2: ( '$' ID -> ^( VARIABLEDEF ID ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:191:4: '$' ID
			{
			DebugLocation(191, 4);
			char_literal90=(CommonToken)Match(input,39,Follow._39_in_variable1018);  
			stream_39.Add(char_literal90);

			DebugLocation(191, 8);
			ID91=(CommonToken)Match(input,ID,Follow._ID_in_variable1020);  
			stream_ID.Add(ID91);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 192:2: -> ^( VARIABLEDEF ID )
			{
				DebugLocation(192, 5);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:192:5: ^( VARIABLEDEF ID )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(192, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLEDEF, "VARIABLEDEF"), root_1);

				DebugLocation(192, 19);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("variable", 20);
			LeaveRule("variable", 20);
			LeaveRule_variable();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_number();
	partial void LeaveRule_number();

	// $ANTLR start "number"
	// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:195:1: number : ( FLOAT | INTEGER );
	[GrammarRule("number")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> number()
	{
		EnterRule_number();
		EnterRule("number", 21);
		TraceIn("number", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set92 = default(CommonToken);

		CommonTree set92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(195, 1);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:196:2: ( FLOAT | INTEGER )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(196, 2);

			set92=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==INTEGER)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set92));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		   catch (RecognitionException e) {
		    throw e;
		   }

		finally
		{
			TraceOut("number", 21);
			LeaveRule("number", 21);
			LeaveRule_number();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _fuzzyvarDef_in_program188 = new BitSet(new ulong[]{0x30C000000000002UL});
		public static readonly BitSet _ruleDef_in_program192 = new BitSet(new ulong[]{0x30C000000000002UL});
		public static readonly BitSet _rulesetDef_in_program196 = new BitSet(new ulong[]{0x30C000000000002UL});
		public static readonly BitSet _executeDef_in_program200 = new BitSet(new ulong[]{0x30C000000000002UL});
		public static readonly BitSet _51_in_fuzzyvarDef240 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_fuzzyvarDef242 = new BitSet(new ulong[]{0x81200000000000UL});
		public static readonly BitSet _fuzzyrangeDef_in_fuzzyvarDef245 = new BitSet(new ulong[]{0x81200000000000UL});
		public static readonly BitSet _descDef_in_fuzzyvarDef249 = new BitSet(new ulong[]{0x81200000000000UL});
		public static readonly BitSet _45_in_fuzzyvarDef255 = new BitSet(new ulong[]{0x1C02000000000000UL});
		public static readonly BitSet _fuzzysetDef_in_fuzzyvarDef260 = new BitSet(new ulong[]{0x1C02000000000000UL});
		public static readonly BitSet _49_in_fuzzyvarDef265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_ruleDef300 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_ruleDef302 = new BitSet(new ulong[]{0xC041400000000000UL});
		public static readonly BitSet _certaintyDecl_in_ruleDef313 = new BitSet(new ulong[]{0xC041400000000000UL});
		public static readonly BitSet _priorityDecl_in_ruleDef328 = new BitSet(new ulong[]{0xC041400000000000UL});
		public static readonly BitSet _descDef_in_ruleDef342 = new BitSet(new ulong[]{0xC041400000000000UL});
		public static readonly BitSet _weightDecl_in_ruleDef353 = new BitSet(new ulong[]{0xC041400000000000UL});
		public static readonly BitSet _whenStatement_in_ruleDef364 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _49_in_ruleDef382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_rulesetDef427 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_rulesetDef429 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _descDef_in_rulesetDef436 = new BitSet(new ulong[]{0x1800000000000UL});
		public static readonly BitSet _47_in_rulesetDef443 = new BitSet(new ulong[]{0x90000000000UL});
		public static readonly BitSet _rulesetChoiceDef_in_rulesetDef445 = new BitSet(new ulong[]{0x90000000002UL});
		public static readonly BitSet _ruleCollectionDef_in_rulesetChoiceDef479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_rulesetChoiceDef493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_ruleCollectionDef512 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_ruleCollectionDef514 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_ruleCollectionDef518 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_ruleCollectionDef521 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _41_in_ruleCollectionDef525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_executeDef546 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_executeDef548 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_executeDef550 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _42_in_executeDef554 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_executeDef557 = new BitSet(new ulong[]{0x60000000000UL});
		public static readonly BitSet _41_in_executeDef561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_fuzzyrangeDef591 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_fuzzyrangeDef593 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_fuzzyrangeDef595 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_fuzzyrangeDef597 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_fuzzyrangeDef599 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_fuzzyrangeDef601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fuzzysetShapeDef_in_fuzzysetDef625 = new BitSet(new ulong[]{0x1C00010000000000UL});
		public static readonly BitSet _40_in_fuzzysetDef631 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_fuzzysetDef637 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_fuzzysetDef639 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_fuzzysetDef641 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_fuzzysetDef643 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_fuzzysetDef645 = new BitSet(new ulong[]{0x60000104000UL});
		public static readonly BitSet _42_in_fuzzysetDef647 = new BitSet(new ulong[]{0x60000104000UL});
		public static readonly BitSet _number_in_fuzzysetDef650 = new BitSet(new ulong[]{0x20000104000UL});
		public static readonly BitSet _41_in_fuzzysetDef656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_fuzzysetShapeDef695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_fuzzysetShapeDef711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_fuzzysetShapeDef725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_descDef752 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_descDef754 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _STRING_LITERAL_in_descDef756 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_descDef758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_certaintyDecl780 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_certaintyDecl782 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_certaintyDecl784 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_certaintyDecl786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_priorityDecl806 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_priorityDecl808 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_priorityDecl810 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_priorityDecl812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_weightDecl834 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_weightDecl836 = new BitSet(new ulong[]{0x104000UL});
		public static readonly BitSet _number_in_weightDecl838 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_weightDecl840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_whenStatement861 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _antecedents_in_whenStatement863 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_whenStatement865 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _consequent_in_whenStatement867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_consequent890 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_consequent892 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_consequent894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _antecedent_in_antecedents917 = new BitSet(new ulong[]{0x20100000000002UL});
		public static readonly BitSet _operator_in_antecedents920 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _antecedent_in_antecedents922 = new BitSet(new ulong[]{0x20100000000002UL});
		public static readonly BitSet _40_in_antecedent948 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _variable_in_antecedent950 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_antecedent952 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_antecedent954 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_antecedent956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_operator982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_operator998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_variable1018 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _ID_in_variable1020 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace DSparx.YARL.Compiler
