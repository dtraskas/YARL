//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g 2012-09-12 11:28:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace DSparx.YARL.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
internal partial class YARLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int ANTECEDENTDEF=4;
	public const int ANTECEDENTSDEF=5;
	public const int CERTAINTYDEF=6;
	public const int CHAR_LITERAL=7;
	public const int COMMENT=8;
	public const int CONSEQUENTDEF=9;
	public const int CONTAINSALL=10;
	public const int DESCDEF=11;
	public const int EXECUTEDEF=12;
	public const int EXPONENT=13;
	public const int FLOAT=14;
	public const int FUZZYRANGEDEF=15;
	public const int FUZZYSETDEF=16;
	public const int FUZZYSETSHAPEDEF=17;
	public const int FUZZYVAR=18;
	public const int ID=19;
	public const int INTEGER=20;
	public const int MINUS=21;
	public const int OPERATORDEF=22;
	public const int PRIORITYDEF=23;
	public const int PROGRAM=24;
	public const int RULECOLLECTIONALLDEFCHOICE=25;
	public const int RULECOLLECTIONDEF=26;
	public const int RULECOLLECTIONDEFCHOICE=27;
	public const int RULEDEF=28;
	public const int RULESETCHOICEDEF=29;
	public const int RULESETDEF=30;
	public const int SHAPEP=31;
	public const int SHAPES=32;
	public const int SHAPEZ=33;
	public const int STRING_LITERAL=34;
	public const int VARIABLEDEF=35;
	public const int WEIGHTDEF=36;
	public const int WHENDEF=37;
	public const int WS=38;

    // delegates
    // delegators

	public YARLLexer()
	{
		OnCreated();
	}

	public YARLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public YARLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 1);
		TraceIn("T__39", 1);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:10:7: ( '$' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:10:9: '$'
			{
			DebugLocation(10, 9);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 1);
			LeaveRule("T__39", 1);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 2);
		TraceIn("T__40", 2);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:11:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:11:9: '('
			{
			DebugLocation(11, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 2);
			LeaveRule("T__40", 2);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 3);
		TraceIn("T__41", 3);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:12:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:12:9: ')'
			{
			DebugLocation(12, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 3);
			LeaveRule("T__41", 3);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 4);
		TraceIn("T__42", 4);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:13:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:13:9: ','
			{
			DebugLocation(13, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 4);
			LeaveRule("T__42", 4);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 5);
		TraceIn("T__43", 5);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:14:7: ( 'all' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:14:9: 'all'
			{
			DebugLocation(14, 9);
			Match("all"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 5);
			LeaveRule("T__43", 5);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 6);
		TraceIn("T__44", 6);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:15:7: ( 'and' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:15:9: 'and'
			{
			DebugLocation(15, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 6);
			LeaveRule("T__44", 6);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 7);
		TraceIn("T__45", 7);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:16:7: ( 'begin' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:16:9: 'begin'
			{
			DebugLocation(16, 9);
			Match("begin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 7);
			LeaveRule("T__45", 7);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 8);
		TraceIn("T__46", 8);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:17:7: ( 'certainty' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:17:9: 'certainty'
			{
			DebugLocation(17, 9);
			Match("certainty"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 8);
			LeaveRule("T__46", 8);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 9);
		TraceIn("T__47", 9);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:18:7: ( 'contains' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:18:9: 'contains'
			{
			DebugLocation(18, 9);
			Match("contains"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 9);
			LeaveRule("T__47", 9);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 10);
		TraceIn("T__48", 10);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:19:7: ( 'desc' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:19:9: 'desc'
			{
			DebugLocation(19, 9);
			Match("desc"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 10);
			LeaveRule("T__48", 10);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 11);
		TraceIn("T__49", 11);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:20:7: ( 'end' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:20:9: 'end'
			{
			DebugLocation(20, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 11);
			LeaveRule("T__49", 11);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 12);
		TraceIn("T__50", 12);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:21:7: ( 'execute' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:21:9: 'execute'
			{
			DebugLocation(21, 9);
			Match("execute"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 12);
			LeaveRule("T__50", 12);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 13);
		TraceIn("T__51", 13);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:22:7: ( 'fuzzyvar' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:22:9: 'fuzzyvar'
			{
			DebugLocation(22, 9);
			Match("fuzzyvar"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 13);
			LeaveRule("T__51", 13);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 14);
		TraceIn("T__52", 14);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:23:7: ( 'is' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:23:9: 'is'
			{
			DebugLocation(23, 9);
			Match("is"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 14);
			LeaveRule("T__52", 14);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 15);
		TraceIn("T__53", 15);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:24:7: ( 'or' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:24:9: 'or'
			{
			DebugLocation(24, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 15);
			LeaveRule("T__53", 15);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 16);
		TraceIn("T__54", 16);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:25:7: ( 'priority' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:25:9: 'priority'
			{
			DebugLocation(25, 9);
			Match("priority"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 16);
			LeaveRule("T__54", 16);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 17);
		TraceIn("T__55", 17);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:26:7: ( 'range' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:26:9: 'range'
			{
			DebugLocation(26, 9);
			Match("range"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 17);
			LeaveRule("T__55", 17);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 18);
		TraceIn("T__56", 18);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:27:7: ( 'rule' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:27:9: 'rule'
			{
			DebugLocation(27, 9);
			Match("rule"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 18);
			LeaveRule("T__56", 18);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 19);
		TraceIn("T__57", 19);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:28:7: ( 'ruleset' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:28:9: 'ruleset'
			{
			DebugLocation(28, 9);
			Match("ruleset"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 19);
			LeaveRule("T__57", 19);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 20);
		TraceIn("T__58", 20);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:29:7: ( 'set_/' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:29:9: 'set_/'
			{
			DebugLocation(29, 9);
			Match("set_/"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 20);
			LeaveRule("T__58", 20);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 21);
		TraceIn("T__59", 21);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:30:7: ( 'set_/\\\\' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:30:9: 'set_/\\\\'
			{
			DebugLocation(30, 9);
			Match("set_/\\"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 21);
			LeaveRule("T__59", 21);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 22);
		TraceIn("T__60", 22);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:31:7: ( 'set_\\\\' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:31:9: 'set_\\\\'
			{
			DebugLocation(31, 9);
			Match("set_\\"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 22);
			LeaveRule("T__60", 22);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 23);
		TraceIn("T__61", 23);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:32:7: ( 'then' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:32:9: 'then'
			{
			DebugLocation(32, 9);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 23);
			LeaveRule("T__61", 23);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 24);
		TraceIn("T__62", 24);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:33:7: ( 'weight' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:33:9: 'weight'
			{
			DebugLocation(33, 9);
			Match("weight"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 24);
			LeaveRule("T__62", 24);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 25);
		TraceIn("T__63", 25);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:34:7: ( 'when' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:34:9: 'when'
			{
			DebugLocation(34, 9);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 25);
			LeaveRule("T__63", 25);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 26);
		TraceIn("MINUS", 26);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:199:6: ( '-' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:199:8: '-'
			{
			DebugLocation(199, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 26);
			LeaveRule("MINUS", 26);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 27);
		TraceIn("STRING_LITERAL", 27);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:202:5: ( '\"' ( ID | ' ' )* '\"' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:202:8: '\"' ( ID | ' ' )* '\"'
			{
			DebugLocation(202, 8);
			Match('\"'); 
			DebugLocation(202, 12);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:202:12: ( ID | ' ' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=3;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}
				else if ((LA1_0==' '))
				{
					alt1 = 2;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:202:13: ID
					{
					DebugLocation(202, 13);
					mID(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:202:18: ' '
					{
					DebugLocation(202, 18);
					Match(' '); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(202, 24);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 27);
			LeaveRule("STRING_LITERAL", 27);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_CHAR_LITERAL();
	partial void LeaveRule_CHAR_LITERAL();

	// $ANTLR start "CHAR_LITERAL"
	[GrammarRule("CHAR_LITERAL")]
	private void mCHAR_LITERAL()
	{
		EnterRule_CHAR_LITERAL();
		EnterRule("CHAR_LITERAL", 28);
		TraceIn("CHAR_LITERAL", 28);
		try
		{
			int _type = CHAR_LITERAL;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:206:2: ( '\\'' . '\\'' )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:206:4: '\\'' . '\\''
			{
			DebugLocation(206, 4);
			Match('\''); 
			DebugLocation(206, 9);
			MatchAny(); 
			DebugLocation(206, 11);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR_LITERAL", 28);
			LeaveRule("CHAR_LITERAL", 28);
			LeaveRule_CHAR_LITERAL();
		}
	}
	// $ANTLR end "CHAR_LITERAL"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 29);
		TraceIn("ID", 29);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:209:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:209:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(209, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(209, 31);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:209:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
					{
					DebugLocation(209, 31);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 29);
			LeaveRule("ID", 29);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 30);
		TraceIn("INTEGER", 30);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:213:2: ( ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:213:4: ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(213, 4);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:213:4: ( '+' | '-' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='+'||LA3_0=='-'))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
				{
				DebugLocation(213, 4);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(213, 15);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:213:15: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
					{
					DebugLocation(213, 15);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 30);
			LeaveRule("INTEGER", 30);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 31);
		TraceIn("FLOAT", 31);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:217:5: ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			try
			{
				alt12 = dfa12.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:217:9: ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(217, 9);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:217:9: ( '+' | '-' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='+'||LA5_0=='-'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
					{
					DebugLocation(217, 9);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(218, 6);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:218:6: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
						{
						DebugLocation(218, 6);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(218, 18);
				Match('.'); 
				DebugLocation(218, 22);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:218:22: ( '0' .. '9' )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='9')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
						{
						DebugLocation(218, 22);
						input.Consume();


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(218, 34);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:218:34: ( EXPONENT )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='E'||LA8_0=='e'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:218:34: EXPONENT
					{
					DebugLocation(218, 34);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:219:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(219, 9);
				Match('.'); 
				DebugLocation(219, 13);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:219:13: ( '0' .. '9' )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if (((LA9_0>='0' && LA9_0<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
						{
						DebugLocation(219, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(219, 25);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:219:25: ( EXPONENT )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='E'||LA10_0=='e'))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:219:25: EXPONENT
					{
					DebugLocation(219, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:220:9: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(220, 9);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:220:9: ( '0' .. '9' )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='0' && LA11_0<='9')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
						{
						DebugLocation(220, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(220, 21);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 31);
			LeaveRule("FLOAT", 31);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 32);
		TraceIn("COMMENT", 32);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:224:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0=='/'))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1=='/'))
				{
					alt16 = 1;
				}
				else if ((LA16_1=='*'))
				{
					alt16 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:224:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(224, 9);
				Match("//"); 

				DebugLocation(224, 14);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:224:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if (((LA13_0>='\u0000' && LA13_0<='\t')||(LA13_0>='\u000B' && LA13_0<='\f')||(LA13_0>='\u000E' && LA13_0<='\uFFFF')))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
						{
						DebugLocation(224, 14);
						input.Consume();


						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(224, 28);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:224:28: ( '\\r' )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0=='\r'))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:224:28: '\\r'
					{
					DebugLocation(224, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(224, 34);
				Match('\n'); 
				DebugLocation(224, 39);
				_channel=HIDDEN;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:225:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(225, 9);
				Match("/*"); 

				DebugLocation(225, 14);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:225:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0=='*'))
					{
						int LA15_1 = input.LA(2);

						if ((LA15_1=='/'))
						{
							alt15 = 2;
						}
						else if (((LA15_1>='\u0000' && LA15_1<='.')||(LA15_1>='0' && LA15_1<='\uFFFF')))
						{
							alt15 = 1;
						}


					}
					else if (((LA15_0>='\u0000' && LA15_0<=')')||(LA15_0>='+' && LA15_0<='\uFFFF')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:225:42: .
						{
						DebugLocation(225, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(225, 47);
				Match("*/"); 

				DebugLocation(225, 52);
				_channel=HIDDEN;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 32);
			LeaveRule("COMMENT", 32);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 33);
		TraceIn("WS", 33);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:228:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:228:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(228, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(232, 11);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 33);
			LeaveRule("WS", 33);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 34);
		TraceIn("EXPONENT", 34);
		try
		{
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:237:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:237:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(237, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(237, 22);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:237:22: ( '+' | '-' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0=='+'||LA17_0=='-'))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
				{
				DebugLocation(237, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(237, 33);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:237:33: ( '0' .. '9' )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if (((LA18_0>='0' && LA18_0<='9')))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:
					{
					DebugLocation(237, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 34);
			LeaveRule("EXPONENT", 34);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	public override void mTokens()
	{
		// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:8: ( T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | MINUS | STRING_LITERAL | CHAR_LITERAL | ID | INTEGER | FLOAT | COMMENT | WS )
		int alt19=33;
		try { DebugEnterDecision(19, false);
		try
		{
			alt19 = dfa19.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(19); }
		switch (alt19)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:10: T__39
			{
			DebugLocation(1, 10);
			mT__39(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:16: T__40
			{
			DebugLocation(1, 16);
			mT__40(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:22: T__41
			{
			DebugLocation(1, 22);
			mT__41(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:28: T__42
			{
			DebugLocation(1, 28);
			mT__42(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:34: T__43
			{
			DebugLocation(1, 34);
			mT__43(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:40: T__44
			{
			DebugLocation(1, 40);
			mT__44(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:46: T__45
			{
			DebugLocation(1, 46);
			mT__45(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:52: T__46
			{
			DebugLocation(1, 52);
			mT__46(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:58: T__47
			{
			DebugLocation(1, 58);
			mT__47(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:64: T__48
			{
			DebugLocation(1, 64);
			mT__48(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:70: T__49
			{
			DebugLocation(1, 70);
			mT__49(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:76: T__50
			{
			DebugLocation(1, 76);
			mT__50(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:82: T__51
			{
			DebugLocation(1, 82);
			mT__51(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:88: T__52
			{
			DebugLocation(1, 88);
			mT__52(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:94: T__53
			{
			DebugLocation(1, 94);
			mT__53(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:100: T__54
			{
			DebugLocation(1, 100);
			mT__54(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:106: T__55
			{
			DebugLocation(1, 106);
			mT__55(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:112: T__56
			{
			DebugLocation(1, 112);
			mT__56(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:118: T__57
			{
			DebugLocation(1, 118);
			mT__57(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:124: T__58
			{
			DebugLocation(1, 124);
			mT__58(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:130: T__59
			{
			DebugLocation(1, 130);
			mT__59(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:136: T__60
			{
			DebugLocation(1, 136);
			mT__60(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:142: T__61
			{
			DebugLocation(1, 142);
			mT__61(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:148: T__62
			{
			DebugLocation(1, 148);
			mT__62(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:154: T__63
			{
			DebugLocation(1, 154);
			mT__63(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:160: MINUS
			{
			DebugLocation(1, 160);
			mMINUS(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:166: STRING_LITERAL
			{
			DebugLocation(1, 166);
			mSTRING_LITERAL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:181: CHAR_LITERAL
			{
			DebugLocation(1, 181);
			mCHAR_LITERAL(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:194: ID
			{
			DebugLocation(1, 194);
			mID(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:197: INTEGER
			{
			DebugLocation(1, 197);
			mINTEGER(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:205: FLOAT
			{
			DebugLocation(1, 205);
			mFLOAT(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:211: COMMENT
			{
			DebugLocation(1, 211);
			mCOMMENT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\Projects\\YARL\\yarlcomp\\grammar\\YARL.g:1:219: WS
			{
			DebugLocation(1, 219);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA12 dfa12;
	DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12(this);
		dfa19 = new DFA19(this);
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x5\xFFFF";
		private const string DFA12_eofS =
			"\x5\xFFFF";
		private const string DFA12_minS =
			"\x1\x2B\x1\xFFFF\x1\x2E\x2\xFFFF";
		private const string DFA12_maxS =
			"\x1\x39\x1\xFFFF\x1\x65\x2\xFFFF";
		private const string DFA12_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3";
		private const string DFA12_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF\xA\x2",
				"",
				"\x1\x1\x1\xFFFF\xA\x2\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "216:1: FLOAT : ( ( '+' | '-' )? ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x5\xFFFF\xD\x15\x1\x2D\x4\xFFFF\x1\x2F\x3\xFFFF\x9\x15\x1\x39\x1\x3A"+
			"\x7\x15\x1\xFFFF\x1\x2F\x1\xFFFF\x1\x42\x1\x43\x4\x15\x1\x48\x2\x15\x2"+
			"\xFFFF\x7\x15\x2\xFFFF\x3\x15\x1\x55\x1\xFFFF\x4\x15\x1\x5B\x1\x15\x1"+
			"\x5E\x1\x15\x1\x60\x1\x61\x2\x15\x1\xFFFF\x3\x15\x1\x67\x1\x15\x1\xFFFF"+
			"\x1\x6A\x2\xFFFF\x1\x15\x2\xFFFF\x5\x15\x1\xFFFF\x1\x15\x2\xFFFF\x1\x72"+
			"\x2\x15\x1\x75\x2\x15\x1\x78\x1\xFFFF\x1\x15\x1\x7A\x1\xFFFF\x1\x7B\x1"+
			"\x7C\x1\xFFFF\x1\x7D\x4\xFFFF";
		private const string DFA19_eofS =
			"\x7E\xFFFF";
		private const string DFA19_minS =
			"\x1\x9\x4\xFFFF\x1\x6C\x3\x65\x1\x6E\x1\x75\x1\x73\x2\x72\x1\x61\x1\x65"+
			"\x1\x68\x1\x65\x1\x30\x3\xFFFF\x1\x30\x1\x2E\x3\xFFFF\x1\x6C\x1\x64\x1"+
			"\x67\x1\x72\x1\x6E\x1\x73\x1\x64\x1\x65\x1\x7A\x2\x30\x1\x69\x1\x6E\x1"+
			"\x6C\x1\x74\x1\x65\x1\x69\x1\x65\x1\xFFFF\x1\x2E\x1\xFFFF\x2\x30\x1\x69"+
			"\x2\x74\x1\x63\x1\x30\x1\x63\x1\x7A\x2\xFFFF\x1\x6F\x1\x67\x1\x65\x1"+
			"\x5F\x1\x6E\x1\x67\x1\x6E\x2\xFFFF\x1\x6E\x2\x61\x1\x30\x1\xFFFF\x1\x75"+
			"\x1\x79\x1\x72\x1\x65\x1\x30\x1\x2F\x1\x30\x1\x68\x2\x30\x2\x69\x1\xFFFF"+
			"\x1\x74\x1\x76\x1\x69\x1\x30\x1\x65\x1\xFFFF\x1\x5C\x2\xFFFF\x1\x74\x2"+
			"\xFFFF\x2\x6E\x1\x65\x1\x61\x1\x74\x1\xFFFF\x1\x74\x2\xFFFF\x1\x30\x1"+
			"\x74\x1\x73\x1\x30\x1\x72\x1\x79\x1\x30\x1\xFFFF\x1\x79\x1\x30\x1\xFFFF"+
			"\x2\x30\x1\xFFFF\x1\x30\x4\xFFFF";
		private const string DFA19_maxS =
			"\x1\x7A\x4\xFFFF\x1\x6E\x1\x65\x1\x6F\x1\x65\x1\x78\x1\x75\x1\x73\x2"+
			"\x72\x1\x75\x1\x65\x2\x68\x1\x39\x3\xFFFF\x1\x39\x1\x65\x3\xFFFF\x1\x6C"+
			"\x1\x64\x1\x67\x1\x72\x1\x6E\x1\x73\x1\x64\x1\x65\x3\x7A\x1\x69\x1\x6E"+
			"\x1\x6C\x1\x74\x1\x65\x1\x69\x1\x65\x1\xFFFF\x1\x39\x1\xFFFF\x2\x7A\x1"+
			"\x69\x2\x74\x1\x63\x1\x7A\x1\x63\x1\x7A\x2\xFFFF\x1\x6F\x1\x67\x1\x65"+
			"\x1\x5F\x1\x6E\x1\x67\x1\x6E\x2\xFFFF\x1\x6E\x2\x61\x1\x7A\x1\xFFFF\x1"+
			"\x75\x1\x79\x1\x72\x1\x65\x1\x7A\x1\x5C\x1\x7A\x1\x68\x2\x7A\x2\x69\x1"+
			"\xFFFF\x1\x74\x1\x76\x1\x69\x1\x7A\x1\x65\x1\xFFFF\x1\x5C\x2\xFFFF\x1"+
			"\x74\x2\xFFFF\x2\x6E\x1\x65\x1\x61\x1\x74\x1\xFFFF\x1\x74\x2\xFFFF\x1"+
			"\x7A\x1\x74\x1\x73\x1\x7A\x1\x72\x1\x79\x1\x7A\x1\xFFFF\x1\x79\x1\x7A"+
			"\x1\xFFFF\x2\x7A\x1\xFFFF\x1\x7A\x4\xFFFF";
		private const string DFA19_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\xE\xFFFF\x1\x1B\x1\x1C\x1\x1D\x2\xFFFF"+
			"\x1\x1F\x1\x20\x1\x21\x12\xFFFF\x1\x1A\x1\xFFFF\x1\x1E\x9\xFFFF\x1\xE"+
			"\x1\xF\x7\xFFFF\x1\x5\x1\x6\x4\xFFFF\x1\xB\xC\xFFFF\x1\xA\x5\xFFFF\x1"+
			"\x12\x1\xFFFF\x1\x16\x1\x17\x1\xFFFF\x1\x19\x1\x7\x5\xFFFF\x1\x11\x1"+
			"\xFFFF\x1\x15\x1\x14\x7\xFFFF\x1\x18\x2\xFFFF\x1\xC\x2\xFFFF\x1\x13\x1"+
			"\xFFFF\x1\x9\x1\xD\x1\x10\x1\x8";
		private const string DFA19_specialS =
			"\x7E\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x2\x1A\x2\xFFFF\x1\x1A\x12\xFFFF\x1\x1A\x1\xFFFF\x1\x13\x1\xFFFF\x1"+
				"\x1\x2\xFFFF\x1\x14\x1\x2\x1\x3\x1\xFFFF\x1\x16\x1\x4\x1\x12\x1\x18"+
				"\x1\x19\xA\x17\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1\x5\x1\x6"+
				"\x1\x7\x1\x8\x1\x9\x1\xA\x2\x15\x1\xB\x5\x15\x1\xC\x1\xD\x1\x15\x1\xE"+
				"\x1\xF\x1\x10\x2\x15\x1\x11\x3\x15",
				"",
				"",
				"",
				"",
				"\x1\x1B\x1\xFFFF\x1\x1C",
				"\x1\x1D",
				"\x1\x1E\x9\xFFFF\x1\x1F",
				"\x1\x20",
				"\x1\x21\x9\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27\x13\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"\x1\x2B\x2\xFFFF\x1\x2C",
				"\xA\x2E",
				"",
				"",
				"",
				"\xA\x2E",
				"\x1\x18\x1\xFFFF\xA\x17\xB\xFFFF\x1\x18\x1F\xFFFF\x1\x18",
				"",
				"",
				"",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"",
				"\x1\x18\x1\xFFFF\xA\x2E",
				"",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x49",
				"\x1\x4A",
				"",
				"",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"",
				"",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"\x1\x59",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x12\x15\x1\x5A\x7"+
				"\x15",
				"\x1\x5C\x2C\xFFFF\x1\x5D",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x5F",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x62",
				"\x1\x63",
				"",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x68",
				"",
				"\x1\x69",
				"",
				"",
				"\x1\x6B",
				"",
				"",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"",
				"\x1\x71",
				"",
				"",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x73",
				"\x1\x74",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x76",
				"\x1\x77",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				"\x1\x79",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | MINUS | STRING_LITERAL | CHAR_LITERAL | ID | INTEGER | FLOAT | COMMENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace DSparx.YARL.Compiler
